#+TITLE: ZSH Configuration
#+AUTHOR: Yuhri Graziano Bernardes
#+PROPERTY: header-args :tangle ~/.zshrc

* Table of Contents :toc:
- [[#pre-init][Pre init]]
  - [[#ssh-agent][SSH Agent]]
  - [[#start-gpg-agent][Start GPG agent]]
- [[#global-configuration][Global configuration]]
  - [[#basic-zsh-config][Basic ZSH config]]
  - [[#go][Go]]
  - [[#android][Android]]
  - [[#zsh-completion-directories][ZSH Completion directories]]
  - [[#oh-my-zsh-plugins][Oh My ZSH plugins]]
  - [[#aws-kleene-arn][AWS Kleene ARN]]
  - [[#wakatime][Wakatime]]
  - [[#path][PATH]]
  - [[#others][Others]]
- [[#startup-scripts][Startup scripts]]
  - [[#oh-my-zsh][Oh My ZSH]]
  - [[#starship-prompt][Starship prompt]]
  - [[#asdf-vm][ASDF VM]]
- [[#plugin-manager][Plugin manager]]
  - [[#initialization][Initialization]]
  - [[#plugins][Plugins]]
  - [[#apply-plugins-and-update][Apply plugins and update]]
- [[#google-cloud][Google cloud]]
  - [[#initialize][Initialize]]
- [[#completions][Completions]]
  - [[#local-completions-files][Local completions files]]
  - [[#aws-cli][AWS CLI]]
  - [[#google-cloud-1][Google Cloud]]
  - [[#kubernetes][Kubernetes]]
  - [[#google-cloud-cli][Google Cloud CLI]]
- [[#misc][Misc]]
  - [[#fuzzy-finder-and-navi][Fuzzy Finder and Navi]]
  - [[#neofetch][Neofetch]]
  - [[#direnv][Direnv]]
  - [[#bash-insulter][Bash insulter]]
- [[#aliases][Aliases]]
  - [[#kubectl][Kubectl]]
  - [[#ctop][ctop]]
  - [[#tmux][Tmux]]
  - [[#git-kraken][Git kraken]]
  - [[#copy-output-to-clipboard][Copy output to clipboard]]
  - [[#switch-ls-to-use-exa-cli][Switch `ls` to use `exa` cli]]
  - [[#clear-screen][Clear screen]]
  - [[#file-manager][File Manager]]
  - [[#docker][Docker]]
  - [[#emacs][Emacs]]
  - [[#config-git-bare-repository][Config git bare repository]]
- [[#functions][Functions]]
  - [[#set-java_home-based-on-asdf-java-version][Set =JAVA_HOME= based on asdf java version]]
  - [[#emacs-prepare-go][Emacs prepare go]]

* Pre init
** SSH Agent
Start ssh agent configured to use GPG as authentication strategy

#+BEGIN_SRC shell
SSH_ENV="$HOME/.ssh/agent-environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
}

# Source SSH settings, if applicable

if [ test -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi
#+END_SRC

** Start GPG agent
#+BEGIN_SRC shell
function sga {
    pkill gpg-agent
    export GPG_TTY="$(tty)"
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    gpgconf --launch gpg-agent
}

sga
#+END_SRC

* Global configuration
** Basic ZSH config
#+begin_src shell
export ZSH='/home/yuhri/.oh-my-zsh'
export ZSH_DISABLE_COMPFIX="true"
export DISABLE_UPDATE_PROMPT="true"
export CASE_SENSITIVE="true"
export HIST_STAMPS="dd/mm/yyyy"
export CASE_SENSITIVE="true"
export HIST_STAMPS="dd/mm/yyyy"
#+end_src

#+RESULTS:
** Go
#+begin_src shell
export GOPATH=~/go
export GOBIN="$GOPATH/bin"
export GO111MODULE=on
#+end_src
** Android
#+begin_src shell
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
#+end_src
** ZSH Completion directories
#+begin_src shell
export ZSH_COMP_DIR=$(echo '$HOME/.zsh/completions' | envsubst)
#+end_src
** Oh My ZSH plugins
#+begin_src shell
plugins=(git)
#+end_src

** AWS Kleene ARN
#+begin_src shell
export MFA_DEVICE='arn:aws:iam::182191116428:mfa/yuhri.bernardes'
#+end_src

** Wakatime
#+begin_src shell
export PATH="$PATH:$HOME/.wakatime"
export WAKATIME_API_KEY=$(cat $HOME/.wakatime_api_key)
#+end_src

** PATH
*** Doom Emacs binary
#+begin_src shell
export PATH="$PATH:$HOME/.emacs.d/bin"
#+end_src
*** Elixir binaries
#+begin_src shell
export PATH="$PATH:$HOME/.elixir-ls/release"
#+end_src

*** Go binaries
#+begin_src shell
export PATH="$PATH:$GOBIN"
#+end_src

*** Local binaries
#+begin_src shell
export PATH="$PATH:$HOME/.local/bin"
#+end_src

** Others
*** Terminal
#+BEGIN_SRC shell
export TERM=alacritty
#+END_SRC
*** Editor
#+BEGIN_SRC shell
export EDITOR=/home/yuhri/.asdf/shims/nvim
#+END_SRC


* Startup scripts
** Oh My ZSH
#+begin_src shell
source $ZSH/oh-my-zsh.sh
#+end_src

** Starship prompt
#+begin_src shell
eval $(starship init zsh)
#+end_src

** ASDF VM
#+begin_src shell
. $HOME/.asdf/asdf.sh
#+end_src

* Plugin manager
I use [[https://github.com/zplug/zplug][zplug]] as plugin manager for ZSH

** Initialization
#+begin_src shell
source ~/.zplug/init.zsh
#+end_src

** Plugins
#+begin_src shell
zplug "zdharma/fast-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
#+end_src

** Apply plugins and update
 #+begin_src shell
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi
zplug load --verbose
#+end_src


* Google cloud
** Initialize
#+begin_src shell
if [ -f '/usr/local/etc/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/local/etc/google-cloud-sdk/path.zsh.inc'; fi
#+end_src

* Completions
** Local completions files
*** Babashka
#+begin_src shell
_bb_tasks() {
    local matches=(`bb tasks |tail -n +3 |cut -f1 -d ' '`)
    compadd -a matches
    _files # autocomplete filenames as well
}
compdef _bb_tasks bb
#+end_src
*** ASDF VM
#+BEGIN_SRC shell
if [ -d $ASDF_DIR ]; then
    fpath=($ZSH_COMP_DIR/ ${ASDF_DIR}/completions/ $fpath)
fi
#+END_SRC

*** Finish
#+begin_src shell
autoload -Uz compinit && compinit
#+end_src

** AWS CLI

#+BEGIN_SRC shell
if [ $(command -v aws_completer) ]; then
    complete -C aws_completer aws
fi
#+END_SRC

** Google Cloud
#+begin_src shell
# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/etc/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/local/etc/google-cloud-sdk/completion.zsh.inc'; fi
#+end_src

** Kubernetes
- kubectl cli

#+BEGIN_SRC shell
if [ $(command -v kubectl) ]; then
    source <(kubectl completion zsh) 2> /dev/null
fi
if [ $(command -v minikube) ]; then
    source <(minikube completion zsh) 2> /dev/null
fi
if [ $(command -v helm) ]; then
    source <(helm completion zsh) 2> /dev/null
fi
#+END_SRC

** Google Cloud CLI
#+BEGIN_SRC shell
if [ -f /opt/google-cloud-sdk/completion.zsh.inc ]; then
    source /opt/google-cloud-sdk/completion.zsh.inc
fi
#+END_SRC


* Misc
** Fuzzy Finder and Navi
fzf: [[https://github.com/junegunn/fzf#installation][install]] | [[https://github.com/junegunn/fzf#usage][usage]]
navi: [[https://github.com/denisidoro/navi#installation][install]] | [[https://github.com/denisidoro/navi#usage][usage]]

*** Fzf default commands

#+BEGIN_SRC shell
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_DEFAULT_OPS="--extended"
export FZF_DEFAULT_COMMAND="fd --hidden --type f"
export FZF_DEFAULT_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
#+END_SRC

** Neofetch

#+BEGIN_SRC shell
if [ $(command -v neofetch) ] ; then
    neofetch
fi
#+END_SRC


** Direnv
Manage environment variables
#+BEGIN_SRC shell
if [ $(command -v direnv) ] ; then
    eval "$(asdf exec direnv hook zsh)"
fi
#+END_SRC

#+RESULTS:

** Bash insulter
load bash insulter

#+BEGIN_SRC shell
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi
#+END_SRC

* Aliases

** Kubectl
#+begin_src shell
alias k=kubectl
alias kgpa='kubectl get pods --all-namespaces'
#+end_src

** ctop
#+begin_src shell
alias ctop='TERM=xterm-256color ctop'
#+end_src

** Tmux
#+BEGIN_SRC shell
alias t='/usr/bin/tmux -f ~/.tmux.conf'
alias ta='t attach'
alias tas='t attach -t'
alias tl='t ls'
alias tn='t new'
alias tns='t new -t'
alias tks='t kill-session -t'
#+END_SRC

*** Tmuxinator
#+BEGIN_SRC shell
alias tm='/usr/bin/tmuxinator'
alias tms='tm start'
alias tmd='tm delete'
alias tml='tm ls'
alias tme='tm edit'
alias tmn='tm new'
alias tmp='tm implode'
#+END_SRC

** Git kraken
#+BEGIN_SRC shell
alias gitkraken='gitkraken &!'
#+END_SRC

** Copy output to clipboard

#+BEGIN_SRC shell
alias pbcopy='xclip -selection clipboard'
#+END_SRC

** Switch `ls` to use `exa` cli

#+begin_src shell
alias ls='exa -alh --color=always --group-directories-first'
alias la='exa -lah --color=always --group-directories-first'
alias l='exa -lh --color=always --group-directories-first'
alias lt='exa -aT --color=always --group-directories-first'
alias l.='exa -ah | egrep "^\."'
#+end_src

** Clear screen

#+BEGIN_SRC shell
alias cls='clear'
#+END_SRC

** File Manager
Open in file manager

#+BEGIN_SRC shell
alias open="xdg-open"
#+END_SRC

** Docker
*** CLI function
Just for easily cli usage

#+BEGIN_SRC shell
alias d='docker'
alias dc='docker-compose'
#+END_SRC
** Emacs
*** Startup
#+BEGIN_SRC shell
emacs (){
    /usr/bin/emacs $@ &!
}
 #+END_SRC

** Config git bare repository

Alias to add configuration files to bare repository

#+BEGIN_SRC shell
alias cfg='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias cfga='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME add'
alias cfgs='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME status'
alias cfgc='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME commit -m'
alias cfgp='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME push origin main'
#+END_SRC

** COMMENT Git
#+BEGIN_SRC shell
alias g='git'
alias gsts='git status'
alias ga='git add'
alias gaa='git add --all'
alias gcl='git clone'
alias gcmm="git commit -m"
alias gcm="git commit"
alias gl='git pull'
#+END_SRC

*** Log
#+BEGIN_SRC shell
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
#+END_SRC

*** Remote
#+BEGIN_SRC shell
alias gr='git remote'
alias gra='git remote add'
alias grup='git remote update'
alias grv='git remote -v'
#+END_SRC


* Functions

** Set =JAVA_HOME= based on asdf java version

#+begin_src shell
_java_home(){
    if [ -d "$(asdf where java)/jre" ]; then
        echo "$(asdf where java)/jre"
    else
        echo "$(asdf where java)"
    fi
}
alias java_home='export JAVA_HOME="$(_java_home)"'
#+end_src

** Emacs prepare go
#+BEGIN_SRC shell
function emacs_prepare_go {
    echo "Installing gore"
    go get -u github.com/motemen/gore/cmd/gore
    echo "Installing gocode"
    go get -u github.com/stamblerre/gocode
    echo "Installing godoc"
    go get -u golang.org/x/tools/cmd/godoc
    echo "Installing goimports"
    go get -u golang.org/x/tools/cmd/goimports
    echo "Installing gorename"
    go get -u golang.org/x/tools/cmd/gorename
    echo "Installing guru"
    go get -u golang.org/x/tools/cmd/guru
    echo "Installing gotest/..."
    go get -u github.com/cweill/gotests/...
    echo "Installing gomodifytags"
    go get -u github.com/fatih/gomodifytags
    echo "installing gopls"
    go get golang.org/x/tools/gopls
}
#+END_SRC
